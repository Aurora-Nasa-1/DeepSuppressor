name: Commit Build module

on:
  push:
    branches: [main] # 根据实际情况替换分支名

jobs:
  compress:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 设置为 0 以获取所有标签历史

      - name: Get current time
        run: |
          random_number=$((RANDOM % 100))
          timestamp_with_random="$(date +'%Y%m%d')${random_number}"
          echo "$timestamp_with_random" > current_time.txt

      - name: Get latest tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "$LATEST_TAG" > latest_tag.txt

      - name: Make module.prop
        run: |
          LATEST_TAG=$(cat latest_tag.txt)
          CURRENT_TIME=$(cat current_time.txt)
          . ./module_settings/config.sh
          echo "id=${action_id}" > module.prop
          echo "name=${action_name}" >> module.prop
          echo "version=${LATEST_TAG}" >> module.prop
          echo "versionCode=${CURRENT_TIME}" >> module.prop
          echo "author=${action_author}" >> module.prop
          echo "description=${action_description}" >> module.prop
          cat module.prop
          rm latest_tag.txt
          rm current_time.txt
          mkdir bin

      - name: Replace module ID in files
        run: |
          . ./module_settings/config.sh
          # 替换文件中的模块ID
          find files -name "*.sh" -exec sed -i "s/AMMF/${action_id}/g" {} \;
          find webroot -name "*.js" -exec sed -i "s/AMMF/${action_id}/g" {} \;
          find src -name "*.cpp" -exec sed -i "s/AMMF2/${action_id}/g" {} \;
          sed -i "s/AMMF/${action_id}/g" webroot/index.html
          echo "已完成模块ID替换"

      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d

      - name: Download json.hpp
        run: |
          mkdir -p src/nlohmann
          curl -o src/nlohmann/json.hpp https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp

      - name: Find and build all C++ files
        run: |
          export CFLAGS="-O3 -flto"
          export CXXFLAGS="-O3 -flto -std=c++20"
          # 查找所有cpp文件并构建
          for cpp_file in src/*.cpp; do
            filename=$(basename -- "$cpp_file" .cpp)
            
            # 构建aarch64版本
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++ \
              $CXXFLAGS -Wall -Wextra -static-libstdc++ \
              -I src -I src/ \
              -o "bin/${filename}-aarch64" "$cpp_file"
            
            # 构建x86_64版本
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang++ \
              $CXXFLAGS -Wall -Wextra -static-libstdc++ \
              -I src -I src/ \
              -o "bin/${filename}-x86_64" "$cpp_file"
          done

      - name: Strip binaries
        run: |
          # 自动strip所有生成的二进制文件
          for binary in bin/*-aarch64 bin/*-x86_64; do
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip "$binary" || echo "Failed to strip $binary"
          done
          
      - name: Remove files
        run: |
          rm -rf src
          rm build.sh
          

      - name: Create META-INF directory structure
        run: |
          mkdir -p META-INF/com/google/android
          echo '#!/sbin/sh' > META-INF/com/google/android/update-binary
          echo 'umask 022' >> META-INF/com/google/android/update-binary
          echo 'ui_print() { echo "$1"; }' >> META-INF/com/google/android/update-binary
          echo 'require_new_magisk() {' >> META-INF/com/google/android/update-binary
          echo '  ui_print "********************************"' >> META-INF/com/google/android/update-binary
          echo '  ui_print " Please install Magisk v20.4+! "' >> META-INF/com/google/android/update-binary
          echo '  ui_print "********************************"' >> META-INF/com/google/android/update-binary
          echo '  exit 1' >> META-INF/com/google/android/update-binary
          echo '}' >> META-INF/com/google/android/update-binary
          echo 'OUTFD=$2' >> META-INF/com/google/android/update-binary
          echo 'ZIPFILE=$3' >> META-INF/com/google/android/update-binary
          echo 'mount /data 2>/dev/null' >> META-INF/com/google/android/update-binary
          echo '[ -f /data/adb/magisk/util_functions.sh ] || require_new_magisk' >> META-INF/com/google/android/update-binary
          echo '. /data/adb/magisk/util_functions.sh' >> META-INF/com/google/android/update-binary
          echo '[ $MAGISK_VER_CODE -lt 20400 ] && require_new_magisk' >> META-INF/com/google/android/update-binary
          echo 'ui_print "******************************"' >> META-INF/com/google/android/update-binary
          echo 'ui_print " Installing module "' >> META-INF/com/google/android/update-binary
          echo 'ui_print "******************************"' >> META-INF/com/google/android/update-binary
          echo 'extract "$ZIPFILE" "module.prop" "$MODPATH"' >> META-INF/com/google/android/update-binary
          echo 'extract "$ZIPFILE" "system.prop" "$MODPATH"' >> META-INF/com/google/android/update-binary
          echo 'set_perm_recursive "$MODPATH" 0 0 0755 0644' >> META-INF/com/google/android/update-binary
          echo 'ui_print "Installation complete!"' >> META-INF/com/google/android/update-binary
          echo 'ui_print "Please reboot your device"' >> META-INF/com/google/android/update-binary
          echo 'install_module' >> META-INF/com/google/android/update-binary
          echo 'exit 0' >> META-INF/com/google/android/update-binary
          chmod 755 META-INF/com/google/android/update-binary
          echo '#MAGISK' > META-INF/com/google/android/updater-script

      - name: Upload zip files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}_${{ env.SHORT_SHA }}
          path: |
            *
