name: Build AMMF2 Module

on:
  push:
    branches: [main]
  workflow_dispatch: # 允许手动触发

jobs:
  run-ammf2-actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "./overlay"

      - name: Clone AMMF2 repository
        run: |
          git clone --depth=1 https://github.com/Aurora-Nasa-1/AMMF2.git ammf2

      - name: Copy files
        run: |
          cd ./overlay
          
          # Step 1: Copy unique top-level files and directories from ./overlay to ../ammf2.
          # This uses --ignore-existing to only copy items that do not exist in the target.
          # -a: archive mode (recursive, preserves permissions, timestamps, etc.)
          # --exclude '/ammf2': exclude the ammf2 directory within ./overlay.
          # This command copies new files and directories from ./overlay to ../ammf2.
          # For directories that are unique to ./overlay, it recursively copies their content.
          # Existing files and directories in ../ammf2 are NOT overwritten by this step.
          rsync -a --ignore-existing --exclude '/ammf2' ./ ../ammf2/
          echo "Copied unique top-level items from overlay to ammf2."
          
          # Step 2: Find top-level directories that exist in both ./overlay and ../ammf2.
          # Then, for each shared directory, recursively copy its content from ./overlay to ../ammf2,
          # overwriting files with the same name in the target, adding new files/subdirectories,
          # but leaving files/subdirectories unique to the target untouched.
          # We use find with maxdepth 1 to only look at top-level items.
          find ./ -maxdepth 1 -type d -not -name '.' -not -name 'ammf2' | while read -r dir; do
            # Remove leading ./ from the directory path
            relative_dir=${dir#./}
            target_dir="../ammf2/$relative_dir"

            # Check if the directory also exists in ../ammf2
            if [ -d "$target_dir" ]; then
              echo "Processing shared directory: $relative_dir"
              # Use rsync to copy the *contents* of the source directory into the target directory.
              # -a: archive mode (recursive, preserves permissions, timestamps, etc.)
              # This command will overwrite files in $target_dir that have the same name as files in ./$relative_dir,
              # add files/subdirectories from ./$relative_dir that don't exist in $target_dir,
              # and leave files/subdirectories in $target_dir that don't exist in ./$relative_dir untouched.
              rsync -a "./$relative_dir/" "$target_dir/"
              echo "Copied content of shared directory $relative_dir, overwriting files."
            fi
          done

          # Keep the specific copies for customize.sh and service.sh as they have different target paths.
          # These specific copies will overwrite the destination files if they exist.
          cp ./customize.sh ../ammf2/files/scripts/install_custom_script.sh
          cp ./service.sh ../ammf2/files/scripts/service_script.sh
          echo "Copied customize.sh and service.sh to specific script paths."
      - name: Get current time
        run: |
          cd ./ammf2
          time=$(date +%Y%m%d)
          echo "$time" > current_time.txt

      - name: Get latest tag
        run: |
          cd ./overlay
          git fetch --tags --force
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "$LATEST_TAG" > ../ammf2/latest_tag.txt

      - name: Make module.prop
        run: |
          cd ./ammf2
          LATEST_TAG=$(cat latest_tag.txt)
          CURRENT_TIME=$(cat current_time.txt)
          . ./module_settings/config.sh
          echo "id=${action_id}" > module.prop
          echo "name=${action_name}" >> module.prop
          echo "version=${LATEST_TAG}" >> module.prop
          echo "versionCode=${CURRENT_TIME}" >> module.prop
          echo "author=${action_author}" >> module.prop
          echo "description=${action_description}" >> module.prop
          echo "updateJson=${updateJson}" >> module.prop
          cat module.prop
          mkdir -p bin

      - name: Replace module ID in files
        run: |
          cd ./ammf2
          LATEST_TAG=$(cat latest_tag.txt)
          . ./module_settings/config.sh
          # 替换文件中的模块ID
          find webroot -name "*.js" -exec sed -i "s/v114514/${LATEST_TAG}/g" {} \;
          find webroot -name "status.js" -exec sed -i "s/Aurora-Nasa-1\/AMMF/${Github_update_repo}/g" {} \;
          find files -name "*.sh" -exec sed -i "s/AMMF/${action_id}/g" {} \;
          find webroot -name "*.js" -exec sed -i "s/AMMF/${action_id}/g" {} \;
          find src -name "*.cpp" -exec sed -i "s/AMMF2/${action_id}/g" {} \;
          find files -name "*.json" -exec sed -i "s/AMMF/${action_name}/g" {} \;
          sed -i "s/AMMF/${action_id}/g" webroot/index.html
          echo "已完成模块ID替换"

      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d

      - name: Download json.hpp
        run: |
          cd ./ammf2
          mkdir -p src/nlohmann
          curl -o src/nlohmann/json.hpp https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp

      - name: Find and build all C++ files
        run: |
          cd ./ammf2
          . module_settings/config.sh
          export CFLAGS="-O3 -flto"
          export CXXFLAGS="-O3 -flto -std=c++20"
          # 查找所有cpp文件并构建
          for cpp_file in src/*.cpp; do
            filename=$(basename -- "$cpp_file" .cpp)
            
            # 构建aarch64版本
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++ \
              $CXXFLAGS -Wall -Wextra -static-libstdc++ \
              -I src -I src/ \
              -o "bin/${filename}-${action_id}-aarch64" "$cpp_file"
            
            # 构建x86_64版本
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang++ \
              $CXXFLAGS -Wall -Wextra -static-libstdc++ \
              -I src -I src/ \
              -o "bin/${filename}-${action_id}-x86_64" "$cpp_file"
          done

      - name: Strip binaries
        run: |
          cd ./ammf2
          # 自动strip所有生成的二进制文件
          for binary in bin/*-aarch64 bin/*-x86_64; do
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip "$binary" || echo "Failed to strip $binary"
          done
          
      - name: Remove files
        run: |
          cd ./ammf2
          rm -rf src
          rm build.sh
          rm latest_tag.txt
          rm current_time.txt
          
      - name: Create META-INF directory structure
        run: |
          cd ./ammf2
          mkdir -p META-INF/com/google/android
          echo '#MAGISK' > META-INF/com/google/android/updater-script

      - name: Upload zip files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}_${{ env.SHORT_SHA }}
          path: ammf2/*