name: Build module release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  compress:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 设置为 0 以获取所有标签历史

      - name: Install 7z
        uses: edgarrc/action-7z@v1.0.5

      - name: Get current time
        run: |
          timestamp_with_random="$(date +'%Y%m%d')"
          echo "$timestamp_with_random" > current_time.txt

      - name: Get latest tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "$LATEST_TAG" > latest_tag.txt

      - name: Make module.prop and prepare files
        run: |
          LATEST_TAG=$(cat latest_tag.txt)
          CURRENT_TIME=$(cat current_time.txt)
          . ./module_settings/config.sh
          echo "id=${action_id}" > module.prop
          echo "name=${action_name}" >> module.prop
          echo "version=${LATEST_TAG}" >> module.prop
          echo "versionCode=${CURRENT_TIME}" >> module.prop
          echo "author=${action_author}" >> module.prop
          echo "description=${action_description}" >> module.prop
          mkdir bin

      - name: Replace module ID in files
        run: |
          . ./module_settings/config.sh
          # 替换文件中的模块ID
          find files -name "*.sh" -exec sed -i "s/AMMF/${action_id}/g" {} \;
          find webroot -name "*.js" -exec sed -i "s/AMMF/${action_id}/g" {} \;
          find src -name "*.cpp" -exec sed -i "s/AMMF2/${action_id}/g" {} \;
          sed -i "s/AMMF/${action_id}/g" webroot/index.html
          echo "已完成模块ID替换"

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d
          add-to-path: false
          
      - name: Cache NDK
        uses: actions/cache@v3
        with:
          path: ${{ steps.setup-ndk.outputs.ndk-path }}
          key: ${{ runner.os }}-ndk-r26d-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-ndk-r26d-

      - name: Download json.hpp
        run: |
          mkdir -p src/nlohmann
          curl -o src/nlohmann/json.hpp https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp

      - name: Find and build all C++ files
        run: |
          export CFLAGS="-O3 -flto"
          export CXXFLAGS="-O3 -flto -std=c++20"
          # 查找所有cpp文件并构建
          for cpp_file in src/*.cpp; do
            filename=$(basename -- "$cpp_file" .cpp)
            
            # 构建aarch64版本
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++ \
              $CXXFLAGS -Wall -Wextra -static-libstdc++ \
              -I src -I src/ \
              -o "bin/${filename}-aarch64" "$cpp_file"
            
            # 构建x86_64版本
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang++ \
              $CXXFLAGS -Wall -Wextra -static-libstdc++ \
              -I src -I src/ \
              -o "bin/${filename}-x86_64" "$cpp_file"
          done

      - name: Strip binaries
        run: |
          # 自动strip所有生成的二进制文件
          for binary in bin/*-aarch64 bin/*-x86_64; do
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip "$binary" || echo "Failed to strip $binary"
          done
          
      - name: Remove files
        run: |
          rm -f src/*.cpp
          rm build.sh

      - name: Compress files
        run: |
          LATEST_TAG=$(cat latest_tag.txt)
          . ./module_settings/config.sh
          7z a -r -mx9 "${action_name}_${LATEST_TAG}.zip" * -x!*.git* -x!*.zip -x!latest_tag.txt

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.zip
